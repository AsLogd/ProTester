#!/bin/bash


#Color scheme
######
# Reset
Color_Off='\e[0m'       # Text Reset

# Regular Colors
Yellow='\e[0;33m'       # Yellow
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
#######
# -i {path}	include. Sets env var of includes folder
# -s {char}	spaces. Change spaces for the character specified (useful to check presentation)
# -n {string}	new. Creates new ProTester project
# -c		compile. Compiles the program without running tests
usage="\n
ProTester 0.01a -- Pro2 c++ projects -- Written by Dreth\n
 -s {char}	spaces. Change spaces for the character specified (useful to check presentation)\n
 -n {string}	new. Creates new ProTester project\n
 -c		compile. Compiles the program without running tests\n
 -e 		execute. Executes the program reading from stdin"
noOpts="42"
compileOnly=false
execute=false
spaceChar=' '
targetName=${PWD##*/}
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
includes=${INCLUSIONS};

#function setIncludes {
# 
#  echo export PATH=$1:$PATH
#}

#deprecated
function clearDir {
  if [ -f bin/$targetName.exe ]; then
    rm bin/$targetName.exe
  fi

}

function compile {
  if [[ $includes ]]; then
    echo "Inclusions path: "$includes
    echo "Compiling..."
    for f in src/*.cc; do
      ccFileName=${f%.*};
      ccFileName=${ccFileName##*/};
      echo "--"$ccFileName
      g++ -c "src/$ccFileName.cc" -I$includes/ -Isrc/inc -o "obj/$ccFileName.o";
      if [ ! -f "obj/$ccFileName.o" ]; then
        echo -e "${Yellow}### COMPILATION FAILED FOR: $ccFileName ###"
	echo -ne "${Color_Off}"
        exit
      fi
    done
  else
     echo "No inclusions path found"
     echo "Compiling..."
     for f in src/*.cc; do
      ccFileName=${f%.*};
      ccFileName=${ccFileName##*/};
      echo "--"$ccFileName
      g++ "src/$ccFileName.cc" -c -Isrc/inc -o "obj/$ccFileName.o";
      if [ ! -f "obj/$ccFileName.o" ]; then
        echo -e "${Yellow}### COMPILATION FAILED FOR: $ccFileName ###"
	echo -ne "${Color_Off}"
        exit
      fi
    done
     
  fi
  
  echo -e "${Yellow}"
  #link
  g++ -o bin/$targetName.exe obj/*.o;
  
  if [ ! -f bin/$targetName.exe ]; then
    echo -e "### LINK FAILED ###"
    echo -ne "${Color_Off}"
    exit
  fi
  
  echo -ne "${Color_Off}"
}

function launch {
  if [ -f bin/$targetName.exe ]; then
    echo "Executing... NOW!"
    bin/$targetName.exe
  else
    echo "Nothing to launch"
  fi
}

function runTests {
  declare -i total
  total=0
  declare -i ok
  ok=0

  if [ -f bin/$targetName.exe ]; then
    echo "####RUNNING TESTS####"
  
    for f in test/*.in; do
      testFileName=${f%.*}
      testFileName=${testFileName##*/}
      bin/$targetName.exe < "test/$testFileName.in" > output/$testFileName.out
      cat "output/$testFileName.out" | sed -r "s/[ \t\n]/$spaceChar/g" > outputP.temp
      cat "test/$testFileName.out" | sed -r "s/[ \t\n]/$spaceChar/g" > outputW.temp
      total=total+1
      result=$(diff -y outputW.temp outputP.temp)
      if [ $? -eq 0 ]
      then
         ok=ok+1
         echo "$testFileName - OK"
      else
         echo -e "${Red}$testFileName - FAILED:"
         echo "$result"
         echo -e "${Color_Off}"
      fi
      rm outputP.temp outputW.temp
    done
  
    if [ $total -eq $ok ]; then
         echo -e "${Green}";
    else
         echo -e "${Red}";
    fi
    echo "PASSED: $ok/$total"
    echo -e "${Color_Off}"
  
  fi
}


function newProject {
  cp -r $DIR/protesterFiles $1
  mv $1/src/template.cc $1/src/$1.cc
  mkdir $1/output $1/bin $1/obj
}

#Priority
while getopts  ":i:s:n:che" flag;
do
  case $flag in
    h)
      echo -e $usage
      exit 0
      ;;
    n)
      newProject ${OPTARG}
      exit 0
      ;;
  esac
done

OPTIND=1 #reset

while getopts  ":i:s:n:che" flag;
do
  case $flag in
    i)
      setIncludes ${OPTARG}
      ;;
    s)
      spaceChar=${OPTARG}
      ;;
    c)
      compileOnly=true
      ;;
    e)
      execute=true
      ;;
    *)
      echo $noOpts
      exit 0
      ;;
  esac
done

#clearDir 
compile 
if [ "$compileOnly" = false ]; then
  runTests 
fi
if [ "$execute" = true ]; then
  launch
fi

echo -ne "${Color_Off}"
